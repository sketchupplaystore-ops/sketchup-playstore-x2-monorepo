name: Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      # Build in web/ just to keep CI checks green before deploying
      - name: CI build (web)
        working-directory: web
        run: |
          pnpm install --frozen-lockfile
          pnpm run build

      # Create a small bundle to upload (optional; keeps a copy with the run)
      - name: Pack bundle
        working-directory: web
        run: |
          rm -f web.tgz
          tar -czf web.tgz \
            public \
            package.json \
            pnpm-lock.yaml \
            next.config.mjs \
            . # include source so server can build if needed

      - name: Upload artifact (bundle)
        uses: actions/upload-artifact@v4
        with:
          name: web-bundle
          path: web/web.tgz

      - name: Copy bundle to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "web/web.tgz"
          target: "${{ secrets.REMOTE_DIR }}"

      - name: Finalize on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euo pipefail
            APP_DIR="${{ secrets.REMOTE_DIR }}"
            cd "$APP_DIR"

            # Unpack bundle to a temp dir and move into place
            rm -rf tmp_release
            mkdir -p tmp_release
            tar -xzf web.tgz -C tmp_release

            # Ensure pnpm available
            corepack enable || true
            corepack prepare pnpm@9 --activate || npm i -g pnpm@9

            cd tmp_release

            # Install and build on the server so .next exists
            pnpm install --frozen-lockfile
            pnpm build

            # Move into web directory (replace existing app files)
            cd "$APP_DIR"
            rsync -a --delete tmp_release/ "$APP_DIR/"

            # Start or reload with PM2
            if pm2 describe sketch-w >/dev/null 2>&1; then
              pm2 restart sketch-w
            else
              pm2 start "pnpm start" --name sketch-w --cwd "$APP_DIR" --env production
            fi
            pm2 save
            echo "âœ… Deploy complete"
